package com.vmware.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.xml.bind.DatatypeConverter;

import com.unboundid.ldap.sdk.BindResult;
import com.unboundid.ldap.sdk.DN;
import com.unboundid.ldap.sdk.Filter;
import com.unboundid.ldap.sdk.LDAPConnection;
import com.unboundid.ldap.sdk.LDAPConnectionPool;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPSearchException;
import com.unboundid.ldap.sdk.ResultCode;
import com.unboundid.ldap.sdk.SearchRequest;
import com.unboundid.ldap.sdk.SearchResult;
import com.unboundid.ldap.sdk.SearchResultEntry;
import com.unboundid.ldap.sdk.SearchScope;
import com.vmware.model.PSCNodeModal;


//private static final int  max_numbof_connection = 2;

public class PSCLdapConnection {
	
	public static final String OBJECT_CLASS = "objectClass";
	public static final String BASE_DN = "dc=vSphere,dc=local";
	public static LDAPConnection connection = null;
	
	public void setLDAPConnection()
	{	
	try {
//		LDAPConnection connection = new LDAPConnection(address, port);
//	     BindResult bindResult = connection.bind(DN, password);
//	     LDAPConnectionPool connectionPool = new LDAPConnectionPool(connection, max_numbof_connection);
		connection = new LDAPConnection();
		connection.connect("10.162.41.122", 389);
		 
		connection.bind("cn=Administrator,cn=users,dc=vSphere,dc=local", "Admin!23");
	    } catch (LDAPException e) {
	        String es = e.getExceptionMessage();
	        System.out.println(es);
	    }
	}
	
	public ArrayList<PSCNodeModal> genPSCNodes() throws LDAPException {

		ArrayList<PSCNodeModal> arrPSCServers = new ArrayList<PSCNodeModal>();
		
		HashMap<String, PSCNodeModal> pscNodes = new HashMap<String, PSCNodeModal>();
		
		
		Filter filter = Filter.createEqualityFilter(OBJECT_CLASS , "vmwDirServer");
		Filter filter2 = 
				Filter.createEqualityFilter(OBJECT_CLASS , "vmwReplicationAgreement");
		
		SearchRequest searchRequest = new SearchRequest(BASE_DN , SearchScope.SUB, filter);
		SearchResult sr;
		
		try {
		    sr = connection.search(searchRequest);
			if (sr.getEntryCount() == 0) {
				throw new LDAPException(ResultCode.INVALID_CREDENTIALS);
			}
			PSCNodeModal pscNodeModal;
			for (SearchResultEntry entry : sr.getSearchEntries()){
				String[] dn = entry.getDN().split(",");
				pscNodeModal = new PSCNodeModal();
				String[] psc_cn = dn[0].split("=");
				String[] site_cn = dn[2].split("=");
				pscNodeModal.setPsc_cn(psc_cn[1]);
				pscNodeModal.setSite_cn(site_cn[1]);
				
				SearchRequest searchRequest3 = new SearchRequest(entry.getDN() , SearchScope.SUB, filter2);
				SearchResult sr3;
				sr3 = connection.search(searchRequest3);
				for (SearchResultEntry entry2 : sr3.getSearchEntries()){
			    	String[] replication_dn = entry2.getDN().split(",");
			    	ArrayList<String> replicationList = new ArrayList<String>();
			    	String[] replication_cn = replication_dn[0].split("=");
			    	replicationList.add(replication_cn[1]);
			    	pscNodeModal.setReplicationList(replicationList);
				}
				pscNodes.put(dn[0], pscNodeModal);
				arrPSCServers.add(pscNodeModal);
				
				System.out.println(" Psc name = " + pscNodeModal.getPsc_cn() + ", Psc replication =  " + pscNodeModal.getReplicationList());
			}

		}
		catch (Exception lse){
			// The search failed for some reason.
			System.out.println("error - " + lse.getMessage());
		}

		  return arrPSCServers;
		}
}
